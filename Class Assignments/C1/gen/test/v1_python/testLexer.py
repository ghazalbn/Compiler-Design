# Generated from D:/uni/compiler/class/C1/grammars\test.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,14,100,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
        1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,4,9,54,8,9,11,9,12,9,
        55,1,10,4,10,59,8,10,11,10,12,10,60,1,11,1,11,1,12,1,12,1,12,1,12,
        1,13,4,13,70,8,13,11,13,12,13,71,1,13,1,13,1,14,1,14,1,14,1,14,5,
        14,80,8,14,10,14,12,14,83,9,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,
        1,15,1,15,5,15,94,8,15,10,15,12,15,97,9,15,1,15,1,15,1,81,0,16,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,0,21,0,23,10,25,11,27,12,
        29,13,31,14,1,0,5,2,0,65,90,97,122,1,0,48,57,3,0,35,38,63,64,94,
        94,3,0,9,9,13,13,32,32,2,0,10,10,13,13,103,0,1,1,0,0,0,0,3,1,0,0,
        0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
        0,15,1,0,0,0,0,17,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
        0,29,1,0,0,0,0,31,1,0,0,0,1,33,1,0,0,0,3,35,1,0,0,0,5,37,1,0,0,0,
        7,39,1,0,0,0,9,41,1,0,0,0,11,43,1,0,0,0,13,45,1,0,0,0,15,47,1,0,
        0,0,17,49,1,0,0,0,19,53,1,0,0,0,21,58,1,0,0,0,23,62,1,0,0,0,25,64,
        1,0,0,0,27,69,1,0,0,0,29,75,1,0,0,0,31,89,1,0,0,0,33,34,5,40,0,0,
        34,2,1,0,0,0,35,36,5,41,0,0,36,4,1,0,0,0,37,38,5,43,0,0,38,6,1,0,
        0,0,39,40,5,45,0,0,40,8,1,0,0,0,41,42,5,42,0,0,42,10,1,0,0,0,43,
        44,5,47,0,0,44,12,1,0,0,0,45,46,5,61,0,0,46,14,1,0,0,0,47,48,3,19,
        9,0,48,16,1,0,0,0,49,50,3,21,10,0,50,18,1,0,0,0,51,54,7,0,0,0,52,
        54,3,23,11,0,53,51,1,0,0,0,53,52,1,0,0,0,54,55,1,0,0,0,55,53,1,0,
        0,0,55,56,1,0,0,0,56,20,1,0,0,0,57,59,7,1,0,0,58,57,1,0,0,0,59,60,
        1,0,0,0,60,58,1,0,0,0,60,61,1,0,0,0,61,22,1,0,0,0,62,63,7,2,0,0,
        63,24,1,0,0,0,64,65,5,10,0,0,65,66,1,0,0,0,66,67,6,12,0,0,67,26,
        1,0,0,0,68,70,7,3,0,0,69,68,1,0,0,0,70,71,1,0,0,0,71,69,1,0,0,0,
        71,72,1,0,0,0,72,73,1,0,0,0,73,74,6,13,1,0,74,28,1,0,0,0,75,76,5,
        47,0,0,76,77,5,42,0,0,77,81,1,0,0,0,78,80,9,0,0,0,79,78,1,0,0,0,
        80,83,1,0,0,0,81,82,1,0,0,0,81,79,1,0,0,0,82,84,1,0,0,0,83,81,1,
        0,0,0,84,85,5,42,0,0,85,86,5,47,0,0,86,87,1,0,0,0,87,88,6,14,1,0,
        88,30,1,0,0,0,89,90,5,47,0,0,90,91,5,47,0,0,91,95,1,0,0,0,92,94,
        8,4,0,0,93,92,1,0,0,0,94,97,1,0,0,0,95,93,1,0,0,0,95,96,1,0,0,0,
        96,98,1,0,0,0,97,95,1,0,0,0,98,99,6,15,1,0,99,32,1,0,0,0,7,0,53,
        55,60,71,81,95,2,6,0,0,0,1,0
    ]

class testLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    Plus = 3
    MINUS = 4
    MUL = 5
    DIVIDE = 6
    ASSIGN = 7
    Id = 8
    Number = 9
    Special = 10
    Newline = 11
    Whitespace = 12
    Comment = 13
    LineComment = 14

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'='", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "Plus", "MINUS", "MUL", "DIVIDE", "ASSIGN", "Id", "Number", 
            "Special", "Newline", "Whitespace", "Comment", "LineComment" ]

    ruleNames = [ "T__0", "T__1", "Plus", "MINUS", "MUL", "DIVIDE", "ASSIGN", 
                  "IDENTIFIER", "NUMBER", "Special", "Newline",
                  "Whitespace", "Comment", "LineComment" ]

    grammarFileName = "test.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


